class MinPriorityQueue:
    def __init__(self):
        self.heap = []

    def insert(self, value):
        self.heap.append(value)
        current_index = len(self.heap) - 1
        parent_index = (current_index - 1) // 2
        while parent_index >= 0 and self.heap[parent_index] > self.heap[current_index]:
            self.heap[parent_index], self.heap[current_index] = self.heap[current_index], self.heap[parent_index]
            current_index = parent_index
            parent_index = (current_index - 1) // 2

    def delMin(self):
        if not self.heap:
            return None
        minimum = self.heap[0]
        last = self.heap.pop()
        if self.heap:
            self.heap[0] = last
            current_index = 0
            while True:
                left_child_index = 2 * current_index + 1
                right_child_index = 2 * current_index + 2
                if left_child_index >= len(self.heap):
                    break
                if right_child_index >= len(self.heap):
                    min_child_index = left_child_index
                elif self.heap[left_child_index] < self.heap[right_child_index]:
                    min_child_index = left_child_index
                else:
                    min_child_index = right_child_index
                if self.heap[current_index] > self.heap[min_child_index]:
                    self.heap[current_index], self.heap[min_child_index] = self.heap[min_child_index], self.heap[current_index]
                    current_index = min_child_index
                else:
                    break
        return minimum
